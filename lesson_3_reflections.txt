Q: When would you want to use a remote repository rather than keeping all your work local?

A: We create a remote repository when we want to publish our local git repository to github, which gives us a access to our repository from anywhere that github can be access, or it can be used to share our repository with others and the public.
---

Q: Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

A: We pull changes manually rather than having Git automatically synced so we can review our changes locally and privately before sending it to Github where it's publicly accessed. This gives us more control in our projects.
---

Q: Describe the differences between forks, clones, and branches. When would you use one instead of another?

A: We use clones when we want to copy a repository to our local directory, and we use fork when we want to clone a github repository to our own remote repository. Branches are used when we want to branch off the current line of commits (usually branch from master) to make changes that won't affect the original branch.
---

Q: What is the benefit of having a copy of the last known state of the remote stored locally?

A: It allows us to merge local branch with remote locally first in case we encounter merge conflicts, which we can then push these changes and keep both remote and local repositories up to date.
---

Q: How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

A: One way to collaborate without git is sharing files via email or any online storages. Git is much easier to use for collaboration, but it's much harder to learn.
---

Q: When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

A: Making changes directly in master reduces commits' complexity and simplifies whats been added, but when we're collaborating with others on a remote repository and we want to push our changes, it's better to create a separate branch with the committed change, and use Github's pull request feature to request a merge of our pushed branch into master branch of remote repo. This way insures that everyone sees merges and be aware of them instead of adding changes without collaborators' knowledge.
---
