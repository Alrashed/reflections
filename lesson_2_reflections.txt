Q: What happens when you initialize a repository? Why do you need to do it?

A: When we initialize a repository using "git init", a file called .git is created in our directory, and the reason this is needed is to track the history of commits we will eventually create for a repository.
---

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?

A: The staging area is where we prepare added files that we will eventually commit to the repository. This gives us a space to check which files we're going to add before committing right away.
---

Q: How can you use the staging area to make sure you have one commit per logical change?

A: When we make a change in a file in a directory, we then use "git add" to add it into the staging area. Before committing, we use "git status" to check how many files are we going to commit. This way we insure that we're only only making one commit per logical change.
---

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

A: Branching is useful when we want to make changes outside the master branch in order to have separate versions of our repository that we can later merge or keep them as is.
---

Q: How do the diagrams help you visualize the branch structure?

A: It gives you an idea of the progress for each branch and where it branched off. This is helpful when we're working on on a repository with multiple branches.
---

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

A: it merges them together into one commit, and groups together both branches' commits that are organized based on commit's date.
---
